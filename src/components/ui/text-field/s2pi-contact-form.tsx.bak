"use client"

import type React from "react"
import { useState } from "react"
import { Button } from "./button"
import {
  S2PINameField,
  S2PIEmailField,
  S2PIPhoneField,
  S2PICompanyField,
  S2PISubjectField,
  S2PIMessageField,
  S2PIProductField,
  S2PIPVField,
  S2PIThicknessField,
  S2PICalculationField,
  S2PITechnicalConstraintField,
  S2PICF1Field,
  S2PICF2Field,
} from "./s2pi-form-fields"
import { Typography } from "../typography/typography"
import { Card, CardContent, CardHeader, CardTitle } from "../cards/card"

interface FormData {
  name: string
  email: string
  phone: string
  company: string
  subject: string
  message: string
  product: string
  pv: string
  thickness: string
  calculation: string
  technicalConstraint: string
  cf1: string
  cf2: string
}

export const S2PIContactForm = () => {
  const [formData, setFormData] = useState<FormData>({
    name: "",
    email: "",
    phone: "",
    company: "",
    subject: "",
    message: "",
    product: "",
    pv: "",
    thickness: "",
    calculation: "",
    technicalConstraint: "",
    cf1: "",
    cf2: "",
  })

  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitStatus, setSubmitStatus] = useState<"idle" | "success" | "error">("idle")

  const handleInputChange =
    (field: keyof FormData) => (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      setFormData((prev) => ({
        ...prev,
        [field]: e.target.value,
      }))
    }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000))
      setSubmitStatus("success")
    } catch (error) {
      setSubmitStatus("error")
    } finally {
      setIsSubmitting(false)
    }
  }

  const resetForm = () => {
    setFormData({
      name: "",
      email: "",
      phone: "",
      company: "",
      subject: "",
      message: "",
      product: "",
      pv: "",
      thickness: "",
      calculation: "",
      technicalConstraint: "",
      cf1: "",
      cf2: "",
    })
    setSubmitStatus("idle")
  }

  if (submitStatus === "success") {
    return (
      <Card className="max-w-2xl mx-auto">
        <CardContent className="p-8 text-center">
          <div className="mb-6">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <Typography variant="h2">Message envoyé avec succès !</Typography>
            <Typography variant="body">Merci pour votre demande. Notre équipe vous contactera dans les plus brefs délais.</Typography>
          </div>
          <Button onClick={resetForm} className="bg-[#1d4572] hover:bg-[#1d4572]/90">
            Envoyer un nouveau message
          </Button>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="max-w-4xl mx-auto">
      <CardHeader className="text-center pb-8">
        <CardTitle>
          <Typography variant="h2">Contactez nos experts S2PI</Typography>
        </CardTitle>
        <Typography variant="body">
          Remplissez ce formulaire pour obtenir des conseils personnalisés sur nos solutions d'isolation.
        </Typography>
      </CardHeader>

      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Contact Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <S2PINameField id="name" value={formData.name} onChange={handleInputChange("name")} required />
            <S2PIEmailField id="email" value={formData.email} onChange={handleInputChange("email")} required />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <S2PIPhoneField id="phone" value={formData.phone} onChange={handleInputChange("phone")} />
            <S2PICompanyField id="company" value={formData.company} onChange={handleInputChange("company")} />
          </div>

          <S2PISubjectField id="subject" value={formData.subject} onChange={handleInputChange("subject")} required />

          {/* Technical Questions */}
          <div className="border-t pt-6">
            <Typography variant="h2" className="text-left mb-6">Questions techniques</Typography>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <S2PIProductField id="product" value={formData.product} onChange={handleInputChange("product")} />
              <S2PIPVField id="pv" value={formData.pv} onChange={handleInputChange("pv")} />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <S2PIThicknessField id="thickness" value={formData.thickness} onChange={handleInputChange("thickness")} />
              <S2PICalculationField
                id="calculation"
                value={formData.calculation}
                onChange={handleInputChange("calculation")}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <S2PICF1Field id="cf1" value={formData.cf1} onChange={handleInputChange("cf1")} />
              <S2PICF2Field id="cf2" value={formData.cf2} onChange={handleInputChange("cf2")} />
            </div>

            <S2PITechnicalConstraintField
              id="technicalConstraint"
              value={formData.technicalConstraint}
              onChange={handleInputChange("technicalConstraint")}
            />
          </div>

          <S2PIMessageField id="message" value={formData.message} onChange={handleInputChange("message")} required />

          {submitStatus === "error" && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-md">
              <Typography variant="body" className="text-red-700 mb-0">
                Une erreur s'est produite lors de l'envoi du message. Veuillez réessayer.
              </Typography>
            </div>
          )}

          <div className="flex justify-center pt-6">
            <Button
              type="submit"
              disabled={isSubmitting}
              className="bg-[#1d4572] hover:bg-[#1d4572]/90 px-8 py-3 text-lg"
            >
              {isSubmitting ? (
                <>
                  <svg
                    className="mr-2 h-5 w-5 animate-spin text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
                  </svg>
                  Envoi en cours...
                </>
              ) : (
                "Envoyer la demande"
              )}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  )
}
